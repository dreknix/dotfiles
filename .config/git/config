# This is Git's per-user configuration file.
#
# Ideas from:
# https://github.com/dikiaap/dotfiles/blob/master/.gitconfig
#

[alias]
  # short for add
  a   = add
  # annotate file with the commit reference: git b <file>
  b   = blame --color-lines
  # short for commit
  c   = commit -m
  # check ignore patterns: git ci file~
  ci  = check-ignore -v
  # short for diff (repository <-> local changes)
  d   = diff
  # diff between current commit and previous
  dl  = diff HEAD~1 HEAD
  # compact diff summary between current commit and previous
  dlc = diff --compact-summary HEAD~1 HEAD
  # short for diff (repository <-> staged)
  ds  = diff --staged
  # short for diff with word-diff (repository <-> local changes)
  dw  = diff --word-diff
  # git fc <pattern> - search in the commits for pattern
  fc  = "!f() { git log --pretty='%C(yellow)%h%Creset -%Cred%d%Creset %s %Cgreen(%ar) %C(bold blue)<%ae>%Creset' --grep=$1 --regexp-ignore-case; }; f"
  # git fs <pattern> - search in the commit logs for pattern
  fs  = "!f() { git log --pretty='%C(yellow)%h%Creset -%Cred%d%Creset %s %Cgreen(%ar) %C(bold blue)<%ae>%Creset' -S$1; }; f"
  # check if file is in repository: git is file
  is  = ls-files --error-unmatch
  # get last commit information
  last = log -1 HEAD
  # print log messages
  l   = log --color=always --pretty='%C(cyan)%h %C(blue)%ar%C(auto)%d %C(yellow)%s %C(green)<%ae>'
  # print log messages with graph
  lg  = log --graph --pretty='%C(yellow)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)%an'
  # pull without rebase
  pm  = pull --no-rebase
  # restore (undo local changes) file: git r <file>
  r   = restore
  # list of remotes repositories
  remotes = remote -v
  # print prettier status
  s   = status -sb
  # short for show commit: git sh ce6692 or git sh ce6692:<file>
  sh  = show --pretty='%C(cyan)%h %C(blue)%ar%C(auto)%d %C(yellow)%s %C(green)<%ae>'
  # undo last commit
  undo = reset --mixed HEAD~1
  # undo things in stage (i.e., git add): git unstage <file>
  unstage = reset HEAD --

  ### additional commands without aliases
  #
  # show content of file in the given commit
  # $ git show ce66692:<file>
  #
  # checkout file from given commit
  # $ git checkout ce66692 -- <file>
  #
  # show file at a specific date
  # $ config show '@{01.05.2023}':<file>
  #
  # show current commit at a specific date
  # $ config show '@{01.05.2023}'
  #
  # show all commits between a date an the current commit
  # $ config log 'main@{two month ago}..'

[init]
  defaultBranch = main

[push]
  default = simple

# rebase by default when doing pull
# user pm to old default pull with merge
[pull]
  rebase = true

[color]
  ui = always
  diff = always

[color "diff"]
  meta = yellow bold
  commit = cyan bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "status"]
  added = green
  changed = yellow
  untracked = red

### additional stuff (i.e. delta config)
[delta]
  syntax-theme = Solarized (dark)
  dark = true
  line-numbers = true
  side-by-side = true
  navigate = true
  hyperlinks = true

# includeif is only working inside a git repository
# path must be ending with '/'

# operating system specific
[includeIf "gitdir/i:%(prefix)/home/"]
  path = ~/.config/git/config-linux
[includeIf "gitdir/i:C:/"]
  path = ~/.config/git/config-windows

# [user] and local changes in seperate files (not in git)
[include]
  path = ~/.config/git/config-local
  path = ~/.config/git/config-user

[includeIf "gitdir:~/.config"]
  path = ~/.config/git/config-user-dreknix
[includeIf "gitdir:~/.local"]
  path = ~/.config/git/config-user-dreknix
[includeIf "gitdir:~/.ssh/"]
  path = ~/.config/git/config-user-dreknix
[includeIf "gitdir:~/dreknix/"]
  path = ~/.config/git/config-user-dreknix
